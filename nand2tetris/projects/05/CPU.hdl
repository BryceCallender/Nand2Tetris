// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 //i xx a cccccc ddd jjj

CHIP CPU 
{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //Instruction decoding
    Not(in=instruction[15], out=AInstruction);
    Not(in=AInstruction, out=CInstruction);

    And(a=CInstruction, b=instruction[5], out=cInstr);
    Or(a=AInstruction, b=cInstr, out=loadAControl); //loadAreg = aInst | (cInst & d1) 

    And(a=CInstruction, b=instruction[4], out=loadDControl); //loadDReg
    And(a=CInstruction, b=instruction[3], out=writeM);

    Mux16(a=instruction, b=aluOut, sel=cInstr, out=feedToARegister);

    ARegister(in=feedToARegister, load=loadAControl, out=Aout); //A register which feeds into a mux and then directly to addressM (last bit not important since its always a 0 for an A type)

    Mux16(a=Aout, b=inM, sel=instruction[12], out=AorM); //The select pin is based on A if a is 0 

    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
        f=instruction[7], no=instruction[6], out=aluOut, zr=zeroFlag, ng=negative); //The alu performs based on ccccc pins which compute the function it will do

    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=aluOut, out=outM);
    DRegister(in=aluOut, load=loadDControl, out=D);

    And(a=zeroFlag, b=instruction[1], out=jeq);
    And(a=negative, b=instruction[2], out=jlt);
    Or(a=zeroFlag, b=negative, out=zeroOrNegative);
    Not(in=zeroOrNegative, out=positive);
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jmp);        // load PC if cond met and jump if cond
    And(a=CInstruction, b=jmp, out=loadPC); // Only jump if C instruction

    Not(in=loadPC,out=incControl);
    PC(in=Aout, load=loadPC, inc=incControl, reset=reset, out[0..14]=pc);
}